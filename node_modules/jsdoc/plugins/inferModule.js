var path = require('path');

exports.astNodeVisitor = {
    visitNode: function(node, e, parser, currentSourceName) {

        var map = [
            { from: /^lib\/foo\/(.*)\.js$/, to: "bar/$1" },
            { from: /^lib\/fin\/(.*)\.js$/, to: "baz/$1" },
            { from: /^lib\/(.*\.js$)/, to: "$1"}
        ];

        if (node.comments != undefined) {
            // Isolate the path relative to the project's root and replace
            var parsedPath = path.parse(currentSourceName);
            var relPath = parsedPath.dir.replace(process.cwd() + '/', '');
            relPath = relPath + '/' + parsedPath.base;

            // Call the map method to check if an object in the map array is
            // applicable. If it is, then update relPath to the change.
            map.map(function(item) {
                if (relPath != relPath.replace(item.from, item.to)) {
                    relPath = relPath.replace(item.from, item.to);
                }
            });

            // Parse the path regardless if it has been altered. This is
            // necessary because if a module with the .js extension is added to
            // the file, the output will just be "js".
            mod = path.parse(relPath);

            // If the comment does not have a module tag, then add one that is
            // the concatenated replacement string and extensionless filename.
            var comment = node.comments[0].raw.split('\n');
            if (!/@module/.test(comment[1])) {
                comment.splice(1, 0, ' * @module ' + mod.dir + '/' + mod.name);
                node.comments[0].raw = comment.join('\n');
            }
        }
    }
};
